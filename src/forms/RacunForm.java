/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package forms;

import communication.KomunikacijaSaServerom;
import domen.Obaveza;
import domen.Obveznik;
import domen.Opomena;
import domen.Racun;
import domen.Rata;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import konstante.Konstante;
import models.ModelTabeleObaveza;
import models.ModelTabeleRata;
import models.ModelTabeleRacun;
import transfer.KlijentskiZahtev;
import transfer.ServerskiOdgovor;

/**
 *
 * @author Ookee
 */
public class RacunForm extends javax.swing.JFrame {

    private int brObveznika;
    private Obveznik obveznik;
    public ModelTabeleObaveza mto;
    public ModelTabeleRata mtr;
    public ModelTabeleRacun mtvr;
    private ArrayList<Racun> listaRacuna;
    private ArrayList<Obaveza> listaObaveza;
    private ArrayList<Rata> listaRata;
    private ArrayList<Rata> listaRataZaBrisanje;
    private Racun izabraniRacun;
    private Obaveza izabranaObaveza;
    private double stanje;
    private double smanjenoStanje;
    private int idStareObaveze;
    private MouseAdapter maRacuni;
    private MouseAdapter maObaveze;

    /**
     * Creates new form RacunForm
     */
    public RacunForm(int brObveznika) {
        initComponents();
        this.brObveznika = brObveznika;
        srediTabeluObaveza();
        srediTabeluRata();
        srediTabeluVrsteTacuna();
        listaRataZaBrisanje = new ArrayList<>();
        idStareObaveze = -1;
        ucitajMouseAdapter();
        if (brObveznika > 0) {
            ucitajObveznika();
            srediFormu();
            ucitajRacune();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSpinner1 = new javax.swing.JSpinner();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblObaveze = new javax.swing.JTable();
        lblImePrezime = new javax.swing.JLabel();
        lblRacun = new javax.swing.JLabel();
        lblVrstaRacuna = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblRate = new javax.swing.JTable();
        btnNovaUplata = new javax.swing.JButton();
        btnPreknjizavanje = new javax.swing.JButton();
        btnOpomena = new javax.swing.JButton();
        btnNovaObaveza = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblRacuni = new javax.swing.JTable();
        lblStanje = new javax.swing.JLabel();
        btnObrisiRatu1 = new javax.swing.JButton();
        btnNoviRacun = new javax.swing.JButton();
        btnSacuvajIzmeneRata = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tblObaveze.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblObaveze);

        lblImePrezime.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblImePrezime.setText("Ime Prezime");

        lblRacun.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblRacun.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblRacun.setText("Izabrani račun:");

        lblVrstaRacuna.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblVrstaRacuna.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        tblRate.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tblRate);

        btnNovaUplata.setText("Nova uplata");
        btnNovaUplata.setPreferredSize(new java.awt.Dimension(110, 30));
        btnNovaUplata.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNovaUplataActionPerformed(evt);
            }
        });

        btnPreknjizavanje.setText("Preknjižavanje");
        btnPreknjizavanje.setPreferredSize(new java.awt.Dimension(110, 30));
        btnPreknjizavanje.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreknjizavanjeActionPerformed(evt);
            }
        });

        btnOpomena.setText("Opomena");
        btnOpomena.setPreferredSize(new java.awt.Dimension(110, 30));
        btnOpomena.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpomenaActionPerformed(evt);
            }
        });

        btnNovaObaveza.setText("Nova obaveza");
        btnNovaObaveza.setPreferredSize(new java.awt.Dimension(110, 30));
        btnNovaObaveza.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNovaObavezaActionPerformed(evt);
            }
        });

        tblRacuni.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(tblRacuni);

        lblStanje.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblStanje.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        btnObrisiRatu1.setText("Obriši ratu");
        btnObrisiRatu1.setPreferredSize(new java.awt.Dimension(110, 30));
        btnObrisiRatu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnObrisiRatu1ActionPerformed(evt);
            }
        });

        btnNoviRacun.setText("Novi račun");
        btnNoviRacun.setPreferredSize(new java.awt.Dimension(110, 30));
        btnNoviRacun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNoviRacunActionPerformed(evt);
            }
        });

        btnSacuvajIzmeneRata.setText("Sačuvaj brisanje rata");
        btnSacuvajIzmeneRata.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSacuvajIzmeneRataActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(lblImePrezime)
                                .addGap(192, 192, 192)
                                .addComponent(lblRacun, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(btnNovaUplata, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnPreknjizavanje, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnOpomena, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnNovaObaveza, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnObrisiRatu1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnNoviRacun, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblStanje, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE))
                            .addComponent(lblVrstaRacuna, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 552, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnSacuvajIzmeneRata, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblRacun, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblImePrezime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblVrstaRacuna, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                        .addComponent(btnNovaUplata, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnPreknjizavanje, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblStanje, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnNovaObaveza, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnObrisiRatu1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnNoviRacun, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(btnOpomena, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSacuvajIzmeneRata)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnNovaUplataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNovaUplataActionPerformed
        if (tblRacuni.getSelectedRow() < 0) {
            JOptionPane.showMessageDialog(this, "Odaberite račun na koji želite da uplatite.");
            return;
        }
        JFrame forma = new UplataForm(izabraniRacun, this);
        forma.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                System.out.println("Zatvorio");
            }
        });
        forma.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        forma.setLocationRelativeTo(null);
        forma.setVisible(true);
    }//GEN-LAST:event_btnNovaUplataActionPerformed

    private void btnPreknjizavanjeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreknjizavanjeActionPerformed
        JFrame forma = new PreknjizavanjeForm(obveznik, this);
        forma.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        forma.setLocationRelativeTo(null);
        forma.setVisible(true);    }//GEN-LAST:event_btnPreknjizavanjeActionPerformed

    private void btnNoviRacunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNoviRacunActionPerformed
        JFrame forma = new NoviRacunForm(obveznik, this, listaRacuna);
        forma.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        forma.setLocationRelativeTo(null);
        forma.setVisible(true);
    }//GEN-LAST:event_btnNoviRacunActionPerformed

    private void btnNovaObavezaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNovaObavezaActionPerformed
        if (izabraniRacun == null) {
            JOptionPane.showMessageDialog(this, "Odaberite račun na kojem želite da napravite obavezu.");
            return;
        }
        JFrame forma = new NovaObavezaForm(izabraniRacun, this);
        forma.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        forma.setLocationRelativeTo(null);
        forma.setVisible(true);
    }//GEN-LAST:event_btnNovaObavezaActionPerformed

    private void btnObrisiRatu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnObrisiRatu1ActionPerformed
        int id = tblRate.getSelectedRow();
        if (id < 0) {
            JOptionPane.showMessageDialog(this, "Odaberite ratu na koji želite da obrišete.");
            return;
        }
        izabranaObaveza.setUkupniIznos(izabranaObaveza.getUkupniIznos() - listaRata.get(id).getIznosRate());
        smanjenoStanje += listaRata.get(id).getIznosRate();
        listaRataZaBrisanje.add(listaRata.get(id));
        listaRata.remove(id);
        mto.setListaObaveza(listaObaveza);
        mtr.setListaRata(listaRata);
        mto.fireTableDataChanged();
        mtr.fireTableDataChanged();
        /*Rata r = listaRata.get(id);
        KlijentskiZahtev kz = new KlijentskiZahtev();
        kz.setOperacija(Konstante.OBRISI_RATU);
        kz.setParametar(r);
        ServerskiOdgovor so;
        try {
            KomunikacijaSaServerom.getInstance().posaljiZahtev(kz);
            so = KomunikacijaSaServerom.getInstance().primiOdgovor();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Došlo je do greške prilikom povezivanja.");
            return;
        }
        if (so.getPoruka().equals("1")) {
            JOptionPane.showMessageDialog(this, "Rata je uspešno obrisana.");
            listaRata.remove(id);
            mtr.setListaRata(listaRata);
            return;
        } else {
            JOptionPane.showMessageDialog(this, "Došlo je do greške prilikom brisanja rate.");
            return;
        }*/
    }//GEN-LAST:event_btnObrisiRatu1ActionPerformed

    private void btnOpomenaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpomenaActionPerformed
        int redRate = tblRate.getSelectedRow();
        if (redRate < 0) {
            JOptionPane.showMessageDialog(this, "Odaberite ratu na koju želite da pošaljete opomenu.");
            return;
        }
        Rata r = mtr.getListaRata().get(redRate);
        r.setIznosRate(r.getIznosRate() * 1.05);
        r.setRokZaUplatu(addDay(r.getRokZaUplatu(), 7));
        Opomena o = new Opomena(0, r.getIznosRate() * 0.05, new Date(), r);
        ArrayList<Object> listaObj = new ArrayList<>();
        listaObj.add(o);
        listaObj.add(r);
        KlijentskiZahtev kz = new KlijentskiZahtev();
        kz.setOperacija(Konstante.POSALJI_OPOMENU);
        kz.setParametar(listaObj);
        ServerskiOdgovor so;
        try {
            KomunikacijaSaServerom.getInstance().posaljiZahtev(kz);
            so = KomunikacijaSaServerom.getInstance().primiOdgovor();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Došlo je do greške prilikom povezivanja.");
            return;
        }
        if (so.getPoruka().equals("1")) {
            JOptionPane.showMessageDialog(this, "Poslata je opomena za datu ratu.");
            osveziRate();
            return;
        } else {
            JOptionPane.showMessageDialog(this, "Došlo je do greške prilikom slanja opomene.");
            return;
        }
    }//GEN-LAST:event_btnOpomenaActionPerformed

    private void btnSacuvajIzmeneRataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSacuvajIzmeneRataActionPerformed
        if (listaRataZaBrisanje.size() == 0) {
            JOptionPane.showMessageDialog(this, "Niste obrisali nijednu ratu.");
            return;
        }
        ArrayList<Object> listaObj = new ArrayList<>();
        listaObj.add(listaRataZaBrisanje);
        listaObj.add(izabranaObaveza);
        KlijentskiZahtev kz = new KlijentskiZahtev();
        kz.setOperacija(Konstante.OBRISI_RATU);
        kz.setParametar(listaObj);
        ServerskiOdgovor so;
        try {
            KomunikacijaSaServerom.getInstance().posaljiZahtev(kz);
            so = KomunikacijaSaServerom.getInstance().primiOdgovor();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Došlo je do greške prilikom povezivanja.");
            return;
        }
        if (so.getPoruka().equals("1")) {
            JOptionPane.showMessageDialog(this, "Rate su uspešno obrisane.");
            smanjenoStanje = 0;
            return;
        } else {
            JOptionPane.showMessageDialog(this, "Došlo je do greške prilikom brisanja rata.");
            return;
        }
    }//GEN-LAST:event_btnSacuvajIzmeneRataActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnNovaObaveza;
    private javax.swing.JButton btnNovaUplata;
    private javax.swing.JButton btnNoviRacun;
    private javax.swing.JButton btnObrisiRatu1;
    private javax.swing.JButton btnOpomena;
    private javax.swing.JButton btnPreknjizavanje;
    private javax.swing.JButton btnSacuvajIzmeneRata;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JLabel lblImePrezime;
    private javax.swing.JLabel lblRacun;
    private javax.swing.JLabel lblStanje;
    private javax.swing.JLabel lblVrstaRacuna;
    private javax.swing.JTable tblObaveze;
    private javax.swing.JTable tblRacuni;
    private javax.swing.JTable tblRate;
    // End of variables declaration//GEN-END:variables

    private void srediTabeluObaveza() {
        mto = new ModelTabeleObaveza();
        tblObaveze.setModel(mto);
    }

    private void srediTabeluRata() {
        mtr = new ModelTabeleRata();
        tblRate.setModel(mtr);
    }

    private void srediTabeluVrsteTacuna() {
        mtvr = new ModelTabeleRacun();
        tblRacuni.setModel(mtvr);
    }

    private void ucitajObveznika() {
        KlijentskiZahtev kz = new KlijentskiZahtev();
        kz.setOperacija(Konstante.VRATI_OBVEZNIKA);
        kz.setParametar(new Obveznik(brObveznika));

        ServerskiOdgovor so;
        try {
            KomunikacijaSaServerom.getInstance().posaljiZahtev(kz);
            so = KomunikacijaSaServerom.getInstance().primiOdgovor();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Došlo je do greške prilikom povezivanja.");
            return;
        }
        obveznik = (Obveznik) so.getOdogovor();
    }

    private void srediFormu() {
        lblImePrezime.setText(obveznik.getIme() + " " + obveznik.getPrezime());
    }

    private void ucitajRacune() {
        KlijentskiZahtev kz = new KlijentskiZahtev();
        kz.setOperacija(Konstante.VRATI_OBVEZNIKOVE_RACUNE);
        Racun r = new Racun(obveznik, null);
        kz.setParametar(r);
        ServerskiOdgovor so;
        try {
            KomunikacijaSaServerom.getInstance().posaljiZahtev(kz);
            so = KomunikacijaSaServerom.getInstance().primiOdgovor();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Došlo je do greške prilikom povezivanja.");
            return;
        }
        listaRacuna = (ArrayList<Racun>) so.getOdogovor();
        if (listaRacuna.isEmpty()) {
            return;
        }
        mtvr.setListaRacuna(listaRacuna);
        mto.setListaObaveza(new ArrayList<>());
        mtr.setListaRata(new ArrayList<>());
        tblRacuni.removeMouseListener(maRacuni);
        tblRacuni.addMouseListener(maRacuni);
    }

    private void ucitajObaveze() {
        KlijentskiZahtev kz = new KlijentskiZahtev();
        kz.setOperacija(Konstante.VRATI_OBAVEZE_ZA_RACUN);
        kz.setParametar(new Obaveza(0, 0, null, izabraniRacun));
        ServerskiOdgovor so;
        try {
            KomunikacijaSaServerom.getInstance().posaljiZahtev(kz);
            so = KomunikacijaSaServerom.getInstance().primiOdgovor();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Došlo je do greške prilikom povezivanja.");
            return;
        }
        listaObaveza = (ArrayList<Obaveza>) so.getOdogovor();
        mtr.setListaRata(new ArrayList<>());
        if (listaObaveza.isEmpty()) {
            mto.setListaObaveza(new ArrayList<>());
            return;
        }
        mto.setListaObaveza(listaObaveza);
        tblObaveze.removeMouseListener(maObaveze);
        tblObaveze.addMouseListener(maObaveze);
    }

    private void ucitajRate() {
        KlijentskiZahtev kz = new KlijentskiZahtev();
        kz.setOperacija(Konstante.VRATI_RATE_ZA_OBAVEZU);
        kz.setParametar(new Rata(0, izabranaObaveza, 0, null));
        ServerskiOdgovor so;
        try {
            KomunikacijaSaServerom.getInstance().posaljiZahtev(kz);
            so = KomunikacijaSaServerom.getInstance().primiOdgovor();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Došlo je do greške prilikom povezivanja.");
            return;
        }
        listaRata = (ArrayList<Rata>) so.getOdogovor();
        if (listaRata.isEmpty()) {
            mtr.setListaRata(new ArrayList<>());
            return;
        }
        mtr.setListaRata(listaRata);
        /*tblRate.addMouseListener(new MouseAdapter() {
            public void mouseClick(MouseEvent me) {
            }
        });*/
    }

    public void setLabelStanje(double d) {
        stanje = stanje + d;
        lblStanje.setText(stanje + " rsd");
    }

    public void azurirajStanje() {
        izabraniRacun.setStanje(stanje);
        KlijentskiZahtev kz = new KlijentskiZahtev();
        kz.setOperacija(Konstante.AZURIRAJ_STANJE);
        kz.setParametar(izabraniRacun);
        ServerskiOdgovor so;
        try {
            KomunikacijaSaServerom.getInstance().posaljiZahtev(kz);
            so = KomunikacijaSaServerom.getInstance().primiOdgovor();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Došlo je do greške prilikom povezivanja.");
            return;
        }
    }

    public void dodajRacun(Racun r) {
        mtvr.dodajRacun(r);
    }

    public void osveziObaveze() {
        ucitajObaveze();
    }

    public void osveziRacune() {
        ucitajRacune();
    }

    public void osveziRate() {
        ucitajRate();
    }

    public static java.sql.Date addDay(java.util.Date date, int i) {
        Calendar cal = Calendar.getInstance();
        cal.setTime(date);
        cal.add(Calendar.DATE, i);
        java.sql.Date date1 = new java.sql.Date((cal.getTime()).getTime());
        System.out.println("Datum je " + date1);
        return date1;
    }

    private void ucitajMouseAdapter() {
        maRacuni = new MouseAdapter() {
            public void mouseClicked(MouseEvent me) {
                int id = tblRacuni.getSelectedRow();
                lblStanje.setText(listaRacuna.get(id).getStanje() + " rsd");
                stanje = listaRacuna.get(id).getStanje();
                lblVrstaRacuna.setText(listaRacuna.get(id).getRacun().getNaziv());
                izabraniRacun = listaRacuna.get(id);
                listaRataZaBrisanje = new ArrayList<>();
                smanjenoStanje = 0;
                idStareObaveze = -1;
                ucitajObaveze();

            }
        };
        maObaveze = new MouseAdapter() {
            public void mouseClicked(MouseEvent me) {
                if (idStareObaveze > -1 && smanjenoStanje > 0) {
                    izabranaObaveza.setUkupniIznos(izabranaObaveza.getUkupniIznos() + smanjenoStanje);
                    //mto.fireTableDataChanged();
                    System.out.println("FIRE");
                }
                System.out.println("ID stare obaveze je " + idStareObaveze);
                int brObaveze = tblObaveze.getSelectedRow();
                System.out.println("BrObaveze je " + brObaveze);
                System.out.println("Smanjeno stanje je " + smanjenoStanje);
                izabranaObaveza = listaObaveza.get(brObaveze);
                idStareObaveze = brObaveze;
                listaRataZaBrisanje = new ArrayList<>();
                smanjenoStanje = 0;
                ucitajRate();
            }
        };
    }

}
