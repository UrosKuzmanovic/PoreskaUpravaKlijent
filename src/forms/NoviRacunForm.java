/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package forms;

import communication.KomunikacijaSaServerom;
import domen.Obveznik;
import domen.Racun;
import domen.VrstaRacuna;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import konstante.Konstante;
import transfer.KlijentskiZahtev;
import transfer.ServerskiOdgovor;

/**
 *
 * @author Ookee
 */
public class NoviRacunForm extends javax.swing.JFrame {

    private Obveznik obveznik;
    private RacunForm rf;
    ArrayList<Racun> listaRacuna;

    /**
     * Creates new form NoviRacunForm
     */
    public NoviRacunForm(Obveznik obveznik, RacunForm rf, ArrayList<Racun> listaRacuna) {
        initComponents();
        this.obveznik = obveznik;
        this.rf = rf;
        this.listaRacuna = listaRacuna;
        lblImePrezime.setText(obveznik.getIme() + " " + obveznik.getPrezime());
        popuniVrsteRacuna();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cmbVrsteRacuna = new javax.swing.JComboBox();
        btnNapraviRacun = new javax.swing.JButton();
        lblImePrezime = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        cmbVrsteRacuna.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnNapraviRacun.setText("Napravi novi račun");
        btnNapraviRacun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNapraviRacunActionPerformed(evt);
            }
        });

        lblImePrezime.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        lblImePrezime.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblImePrezime.setText("Ime i prezime");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(50, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(lblImePrezime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnNapraviRacun, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 330, Short.MAX_VALUE)
                    .addComponent(cmbVrsteRacuna, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(50, 50, 50))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(lblImePrezime, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(cmbVrsteRacuna, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnNapraviRacun)
                .addContainerGap(40, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnNapraviRacunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNapraviRacunActionPerformed
        napraviNoviRacun();
    }//GEN-LAST:event_btnNapraviRacunActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnNapraviRacun;
    private javax.swing.JComboBox cmbVrsteRacuna;
    private javax.swing.JLabel lblImePrezime;
    // End of variables declaration//GEN-END:variables

    private void napraviNoviRacun() {
        KlijentskiZahtev kz = new KlijentskiZahtev();
        kz.setOperacija(Konstante.KREIRAJ_NOVI_RACUN);
        Racun r = new Racun(obveznik, (VrstaRacuna) cmbVrsteRacuna.getSelectedItem(), 0);
        kz.setParametar(r);
        ServerskiOdgovor so;
        try {
            KomunikacijaSaServerom.getInstance().posaljiZahtev(kz);
            so = KomunikacijaSaServerom.getInstance().primiOdgovor();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Došlo je do greške prilikom povezivanja.");
            return;
        }
        if (so.getPoruka().equals("1")) {
            JOptionPane.showMessageDialog(this, "Uspešno ste kreirali novi račun.");
            rf.dodajRacun(r);
            this.dispose();
        }
    }

    private void popuniVrsteRacuna() {
        KlijentskiZahtev kz = new KlijentskiZahtev();
        kz.setOperacija(Konstante.VRATI_SVE_VRSTE_RACUNA);
        ServerskiOdgovor so;
        try {
            KomunikacijaSaServerom.getInstance().posaljiZahtev(kz);
            so = KomunikacijaSaServerom.getInstance().primiOdgovor();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Došlo je do greške prilikom povezivanja.");
            return;
        }
        ArrayList<VrstaRacuna> listaVrstaRacuna = (ArrayList<VrstaRacuna>) so.getOdogovor();
        ArrayList<VrstaRacuna> novaLista = new ArrayList<>();
        if (!(listaRacuna.isEmpty())) {
            for (VrstaRacuna vrstaRacuna : listaVrstaRacuna) {
                for (Racun racun : listaRacuna) {
                    if (racun.getRacun().getBrRacuna() == vrstaRacuna.getBrRacuna()) {
                        break;
                    }
                    if (listaRacuna.indexOf(racun) == (listaRacuna.size() - 1)) {
                        novaLista.add(vrstaRacuna);
                    }
                }
            }
            if (novaLista.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Obveznik poseduje sve račune.");
                this.dispose();
            }
            cmbVrsteRacuna.removeAllItems();
            for (VrstaRacuna vrstaRacuna : novaLista) {
                cmbVrsteRacuna.addItem(vrstaRacuna);
            }
        } else {
            cmbVrsteRacuna.removeAllItems();
            for (VrstaRacuna vrstaRacuna : listaVrstaRacuna) {
                cmbVrsteRacuna.addItem(vrstaRacuna);
            }
        }
    }
}
